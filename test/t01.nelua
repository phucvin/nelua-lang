## pragmas.nogc = true
require 'string'

do print '## Memory management'
  local str = tostring(1) -- tostring needs to allocates a new string
  print(str) -- outputs: 1
  str:destroy() -- deallocates the string
  print(str) -- the string was destroyed and is now empty, outputs nothing
end

local function get_multiple(): (boolean, integer)
  return false, 1
end

local a, b = get_multiple()
print(a,b) -- outputs: false 1

-- import "puts" from C library
local function puts(s: cstring <const>): cint <cimport>
  -- cannot have any code here, because this function is imported
end

local s21 = tostring(21)
puts(s21) -- outputs: hello

-- this is a preprocessor code block
##[[
function my_compiletime_function(str)
  print(str) -- print at compile time
end

-- Opens a file in append mode
file = io.open("test/t01_comptime_logs.txt", "a")
file:write('comptime\n')
]]

-- call the function defined in the block above
## my_compiletime_function('// hello from preprocessor')

local function pow(x: auto, n: integer)
## static_assert(x.type.is_scalar, 'cannot pow variable of type "%s"', x.type)
## if x.type.is_integral then
  -- x is an integral type (any unsigned/signed integer)
  local r: #[x.type]# = 1
  for i=1,n do
    r = r * x
  end
  return r
## elseif x.type.is_float then
  -- x is a floating point type
  return x ^ n
## end
end

local a = pow(2, 2) -- use specialized implementation for integers
local b = pow(2.0, 2) -- use pow implementation for floats
print(a,b) -- outputs: 4 4.0

-- uncommenting the following will trigger the compile error:
--   error: cannot pow variable of type "string"
--pow('a', 2)
